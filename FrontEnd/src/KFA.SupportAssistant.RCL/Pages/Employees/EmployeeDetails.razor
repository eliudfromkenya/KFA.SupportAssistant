@attribute [Route(Constants.EmployeeDetails)]

@using BlazorPro.Spinkit
@using KFA.SupportAssistant.Globals.Services
@using KFA.SupportAssistant.RCL.Models.Data
@using KFA.SupportAssistant.RCL.Services
@using KFA.SupportAssistant.UseCases.ModelCommandsAndQueries
@inject ILocalStorageService localStorageService
@inject IUserService userService
@inject IHttpClientService httpClientService

<h3>EmployeeDetails</h3>


<div class="col-12">

    <h3><b>EmployeeDetailss</b></h3>    
   
</div>

@code {

    public EmployeeDetailDTO? employeedetails { get; set; }
    public List<EmployeeDetailDTO>? employeedetailsList { get; set; }
    public List<EmployeeDetailDTO>? filteredEmployeeDetailsList { get; set; }
    public string? SelectedCity { get; set; }

    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string? RecordName { get; set; }
    public string[]? Cities { get; set; }
    public bool IsGridViewFiltered { get; set; }
    //bool isLoading = true;

    //ElementReference firstNameTextBox;

    protected override void OnInitialized()
    {
        Console.WriteLine("EmployeeDetailss - OnInitialized");
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("EmployeeDetailss - OnInitializedAsync");

        employeedetails = new EmployeeDetailDTO();
        employeedetailsList = new List<EmployeeDetailDTO>();
        //employeedetailsList = await employeedetailsService.GetEmployeeDetailss();

        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("EmployeeDetailss - OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("EmployeeDetailss - OnParametersSetAsync");
        await base.OnParametersSetAsync();
    }

    protected override bool ShouldRender()
    {
        base.ShouldRender();
        Console.WriteLine("EmployeeDetailss - ShouldRender");

        return true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("EmployeeDetailss - OnAfterRender - firstRender = " + firstRender);
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("EmployeeDetailss - OnAfterRenderAsync - firstRender = " + firstRender);

        if (firstRender)
        {
            await LoadEmployeeDetailss();

            //isLoading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        Console.WriteLine("EmployeeDetails - Dispose");
    }

    private async Task LoadEmployeeDetailss()
    {
        await Task.Delay(500);
        httpClientService.SubURL = "employee-details";
        //employeedetailsList = filteredEmployeeDetailsList = (await httpClientService.GetAsync<EmployeeDetailDTO>(new ListParam { Take = 1000000, Skip = 0 }))..ToList();

        if (employeedetailsList == null)
        {
            RefreshRequest refreshRequest = new RefreshRequest();
            refreshRequest.AccessToken = await localStorageService.GetItemAsync<string>("accessToken");
            refreshRequest.RefreshToken = await localStorageService.GetItemAsync<string>("refreshToken");

           // var user1 = await userService.RefreshTokenAsync(refreshRequest);
           // await localStorageService.SetItemAsync("accessToken", user1?.AccessToken);

            // employeedetailsList = filteredEmployeeDetailsList = await bookStoresService.GetAllAsync("employeedetailss/GetEmployeeDetailss");
        }

        StateHasChanged();
    }

    private async Task SaveEmployeeDetails()
    {
        await Task.Run(() => { });
        // employeedetails.City = SelectedCity;

        // if (employeedetails?.EmployeeDetailsId == 0)
        //     await bookStoresService.SaveAsync("employeedetailss/CreateEmployeeDetails", employeedetails);
        // else
        //     await bookStoresService.UpdateAsync("employeedetailss/UpdateEmployeeDetails", employeedetails.EmployeeDetailsId, employeedetails);

        // await LoadEmployeeDetailss();

        // Result = true;
        // IsVisible = true;

        // var firstName = employeedetails?.FirstName;
        // var lastName = employeedetails?.LastName;

        // RecordName = firstName + " " + lastName;

        // employeedetails = new EmployeeDetails();

        // //await JSRuntime.InvokeVoidAsync("saveMessage", firstName, lastName);
        // await JSRuntime.InvokeVoidAsync("setFocusOnElement", firstNameTextBox);
    }

    private async Task DeleteEmployeeDetails(int employeedetailsId)
    {
        await Task.Run(() => { });
        //await bookStoresService.DeleteAsync("employeedetailss/DeleteEmployeeDetails/", employeedetailsId);
       // await LoadEmployeeDetailss();

        //throw new Exception("DeleteEmployeeDetails");
    }

    private void EditEmployeeDetails(EmployeeDetailDTO argEmployeeDetails)
    {
        employeedetails = argEmployeeDetails;
    }

    private void OnSelectCityChange(ChangeEventArgs changeEventArgs)
    {
       // SelectedCity = (string)changeEventArgs.Value;
    }

    private void OnEmployeeDetailsSearchTextChanged(ChangeEventArgs changeEventArgs, string columnTitle)
    {
      
    }

}