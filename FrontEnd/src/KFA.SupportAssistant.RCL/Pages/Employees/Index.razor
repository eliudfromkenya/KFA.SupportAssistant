@page "/employees"
@page "/employees/index"
@using Fluxor
@using BlazorPro.Spinkit
@using KFA.SupportAssistant.Globals
@using KFA.SupportAssistant.RCL.Components
@using KFA.SupportAssistant.RCL.Models.Data
@using KFA.SupportAssistant.RCL.Services
@using KFA.SupportAssistant.RCL.State.Employees
@using KFA.SupportAssistant.RCL.Pages.Employees
@using KFA.SupportAssistant.RCL.State.MainTitle
@using Microsoft.AspNetCore.Components.QuickGrid
@inject ILocalStorageService localStorageService
@inject IUserService userService
@inject IDispatcher dispatcher
@inject IState<EmployeesState> state
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<EmployeeList> </EmployeeList>

@code {
    //Pagination
    PaginationState pagination = new PaginationState { ItemsPerPage = 1000 };

  
    [SupplyParameterFromForm]
    EmployeeDetailDTO employee { get; set; } = new();
    DateTime? SelectedDate;


    protected override void OnInitialized()
    {
        base.OnInitialized();
        dispatcher.Dispatch(new FetchEmployeeDetailsAction());
        dispatcher.Dispatch(new ChangeMainTitleAction { MainTitle = $"Staff Dues" });

        try
        {
            var items = MenuItems ?? [];
            for (int i = 0; i < items.Length; i++)
            {
                var obj = items[i];
                var text = obj.SVGIcon?.Replace($@"fill=""currentColor""", @"fill=""#01497C"" class=""fill-current text-blue-three mr-5""") ?? "";
                text = text.Replace("<svg", @"<svg height=""32px"" width=""32px""");
                var bytes = System.Text.Encoding.UTF8.GetBytes(text);

               // var data = Convert.ToBase64String(bytes);
               // var image = String.Format("data:image/svg+xml;base64,{0}", data);
                items[i] = obj with { SVGIcon = text };
            }

            dispatcher.Dispatch(new ChangeGeneralMenuAction { Menus = items, Error = null });
        }
        catch (Exception ex)
        {
            dispatcher.Dispatch(new ChangeGeneralMenuAction { Menus = [], Error = ex });
        }
    }   

    async Task AddEmployee()
    {
        //.RejoinDate = SelectedDate;
        // Update
        // if (!string.IsNullOrWhiteSpace(employee.EmployeeId))
        // {
        //     var p = EmployeesList.FirstOrDefault(_ => _.EmployeeId == employee.EmployeeId);
        //     if (p is null) return;
        //     EmployeesList.Remove(p); EmployeesList.Add(employee); employee = new();
        //     GetDataAgain();
        //     return;
        // }

        // //Add

        // if (employee.FullName is null) return;
        // employee.EmployeeId = (EmployeesList.Count + 1).ToString("00");
        // EmployeesList.Add(employee);
        // employee = new();
        // GetDataAgain();

        await Task.Run(() => { });
        return;
    }

    // Load data from List to the Queryable container
    private void ConvertListToQueryable()
    {
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    void Edit(EmployeeDetailDTO incomingModel)
    {
        SelectedDate = incomingModel.RejoinDate;
        employee = incomingModel;
    }

    void Delete(EmployeeDetailDTO incomingModel)
    {
        // EmployeesList.Remove(EmployeesList.First(_ => _.EmployeeId == incomingModel.EmployeeId));
        // if (EmployeesList is null) return;
        // GetDataAgain();
    }


    // Get EmployeeDetailDTO's Age
    int ComputeAge(DateTime? birthDate)
    {
        return DateTime.Now.Year - birthDate?.Year - (birthDate?.DayOfYear < DateTime.Now.DayOfYear ? 0 : 1) ?? 0;
    }

    //Search EmployeeDetailDTO
    void SearchEmployee(ChangeEventArgs e)
    {
        // if (!string.IsNullOrEmpty(e.Value!.ToString()))
        // {
        //     var result = EmployeesList.Where(c => c.FullName!.Contains(e.Value!.ToString()!, StringComparison.CurrentCultureIgnoreCase)).ToList();
        //     EmployeesQueryable = Enumerable.Empty<EmployeeDetailDTO>().AsQueryable();
        //     if (result.Count == 0)
        //     {
        //         return;
        //     }

        //     if (result.Any())
        //     {
        //         foreach (var employee in result.OrderBy(_ => _.EmployeeId))
        //             EmployeesQueryable = EmployeesQueryable.Concat(new[] { employee }.AsQueryable());
        //     }
        //     return;
        // }
        // GetDataAgain();
    }
}
