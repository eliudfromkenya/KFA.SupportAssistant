@page  "/"
@using KFA.SupportAssistant.RCL.Data
@using KFA.SupportAssistant.RCL.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json
@using KFA.SupportAssistant.RCL.Services
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject IUserService userService
@inject IJSRuntime jsRunTime

<EditForm Model="@userLoginDetails" OnValidSubmit="@ValidateUser">
    <div>
        <br /><br /><br /><br /><br />
    </div>
    <div>
        <h3 style="font-weight:bold; color:purple">Book Stores Login</h3>
    </div>
    <div>
        <br />
    </div>
    <div class="col-12 row">
        <input class="form-control col-12" @bind="userLoginDetails.Username" placeholder="email address" />
    </div>
    <br />
    <div class="col-12 row">
        <input type="password" class="form-control col-12" @bind="userLoginDetails.Password" placeholder="password" />
    </div>
    <br />
    <div class="col-12 row">
        <span class="col-12"></span>
        <input type="submit" class="form-control col-6 btn btn-primary" value="Login" />
        <a href="/signup" class="col-3">Sign up</a>
    </div>
    <br />
    <div class="col-12 row" style="text-align:left; font-weight:bold">
        <span class="col-12">@LoginMesssage</span>
    </div>
</EditForm>

@code {
    public class LoginDetails
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string Device { get; set; } = string.Empty;
    }

    private SystemUserDTO user = new ();
    public string? LoginMesssage { get; set; }
    ClaimsPrincipal? claimsPrincipal;
    private LoginDetails userLoginDetails = new ();

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        user = new SystemUserDTO();

        if (authenticationStateTask != null)
            claimsPrincipal = (await authenticationStateTask).User;

        if (claimsPrincipal?.Identity?.IsAuthenticated == true)
        {
            NavigationManager.NavigateTo("/index");
        }
        {
            userLoginDetails.Username = "philip.cramer@gmail.com";
            userLoginDetails.Password = "philip.cramer";
        }

    }

    private async Task<bool> ValidateUser()
    {
        //assume that user is valid
        //call an API

        var returnedUser = await userService.LoginAsync(userLoginDetails);

        if (returnedUser?.EmailAddress != null)
        {
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(returnedUser);
            NavigationManager.NavigateTo("/index");
        }
        else
        {
            LoginMesssage = "Invalid username or password";
        }

        return await Task.FromResult(true);
    }

}
