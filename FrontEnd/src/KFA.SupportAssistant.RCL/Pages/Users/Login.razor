@page "/login"
@using KFA.SupportAssistant.RCL.Models.Data
@using KFA.SupportAssistant.RCL.Data
@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json
@using KFA.SupportAssistant.RCL.Services
@using KFA.SupportAssistant.RCL.Components
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject IUserService userService
@inject IJSRuntime jsRunTime

<div class="flex flex-col row w-screen h-screen flex-wrap">
    <div class="flex col w-6/12 h-full flex-wrap">
        <figure class="flex col flex-col my-auto items-center jusfify-center w-full">
            <img src="./images/icon.png" class="w-64 h-64 mx-auto my-1 " />
            <div class="h-0" />
            <figcaption class="text-blue-three mt-9 main-title font-bold">
                KFA Support Assistant
            </figcaption>
        </figure>
    </div>
    <div class="flex col w-6/12 h-full flex-wrap">
        <div class="w-3/5 max-w-[426px] mx-auto my-auto">
            <EditForm Model="@userLoginDetails" OnValidSubmit="@ValidateUser">
                <h1 class="font-bold leading-0 mb-0 font-mukta text-[32px] text-customBlack-one">Welcome!</h1>
                <p class="font-normal mb-9 font-mukta text-[24px] text-gray-two">Login to continue</p>
                <div class="col-12 row">
                    <input class="form-control text-input border-blue-three " @bind="userLoginDetails.Username" placeholder="email address" />
                </div>
                <br />
                <div class="col-12 row">
                    <input type="password" class="form-control text-input  border-blue-three " @bind="userLoginDetails.Password" placeholder="password" />
                </div>
                <br />
                <div class="w-full flex flex-col">
                    <span class="col-12"></span>
                    <input type="submit" class="form-control col-6 btn btn-primary" value="Login" />
                    <div class="w-4" />
                    <a href="/signup" class="col-3 mt-4 mr-3 ml-auto">Sign up</a>
                </div>
                <br />
                 <div class="items-center mx-auto justify-center">
                    <LoadingComponent Width="48" IsLoading="@isLoading" />
                 </div>
                <div class="col-12 row" style="text-align:left; font-weight:bold">
                    <span class="text-red-500">@LoginMesssage</span>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    public class LoginDetails
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string Device { get; set; } = string.Empty;
    }
    public readonly struct LoginResponse
    {
        public LoginResponse(string? loginId, string? token, object? userId, string? role, DateTime? date, string?[] rights, SystemUserDTO user)
        {
            LoginId = loginId;
            Token = token;
            UserId = userId;
            Role = role;
            Rights = rights;
            Date = date;
            User = user;
        }

        public string? LoginId { get; }
        public string? Token { get; }
        public object? UserId { get; }
        public string? Role { get; }
        public SystemUserDTO? User { get; }
        public string?[] Rights { get; }
        public DateTime? Date { get; }
    }

    private SystemUserDTO user = new();
    public string? LoginMesssage { get; set; }
    ClaimsPrincipal? claimsPrincipal;
    private LoginDetails userLoginDetails = new();
    bool isLoading = false;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        user = new SystemUserDTO();

        if (authenticationStateTask != null)
            claimsPrincipal = (await authenticationStateTask).User;

        if (claimsPrincipal?.Identity?.IsAuthenticated == true)
        {
            NavigationManager.NavigateTo("/index");
        }
        {
            try
            {
                var name = await localStorageService.GetItemAsync<string>("name");
                userLoginDetails.Username = name.ToUpper();
            }
            catch
            {                
            }           
        }

    }

    private async Task<bool> ValidateUser()
    {
        try
        {
            isLoading = true;
            var returnedUser = await userService.LoginAsync(userLoginDetails);
            LoginMesssage = null;

            if (returnedUser?.User?.Username != null)
            {
                await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(returnedUser?.User!, returnedUser?.Token ?? "");
                NavigationManager.NavigateTo("/index");
            }
            else
            {
                LoginMesssage = "Invalid username or password";
            }

            isLoading = false;
            return true;
        } 
        catch(Exception ex)
        {
            isLoading = false;
            LoginMesssage = ex.Message;
            return false;
        }       
    }

}
